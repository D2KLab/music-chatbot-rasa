from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from rasa_core.actions.action import Action
from rasa_core.events import SlotSet
from rasa_core.channels.direct import CollectingOutputChannel

import logging

from common import command_sanitizer
from common import out_context_set
from common import intent_index
from common import in_context_set
from domain_builder import get_entity
from domain_builder import entity_types

from datetime import datetime
import parsedatetime
from date_extractor import extract_dates

logger = logging.getLogger(__name__)
contain = intent_index()



active_contexts={}
entities=get_entity("dialogflow").entity_list
types_entities=entity_types().entity_to_types


def contexts_reset(action_name,tracker):
    events=[]
    contexts_in = in_context_set(action_name)
    contexts_out = out_context_set(action_name)
    if len(contexts_out)==0:
        contexts_out=[action_name]
    contexts_in.extend(contexts_out)
    contexts=contexts_in
    should_reset=1
    for context in contexts:
        try:
            if context not in contexts:
                active_contexts[context]=0

            elif active_contexts[context]>0:
                should_reset=0
                break
        except:
            pass        

    if should_reset==1:
        for entity in entities:
            try:
                next(tracker.get_latest_entity_values(entity))
            except:
                # no entities for this entity found in the last massage    
                tracker._set_slot(entity, None)
                events.append(SlotSet(entity, None))

    for context in active_contexts:
        active_contexts[context]=0

    for context in contexts_out:
        active_contexts[context]=1
        
    return events  

def transform_slots_to_standard(tracker):
    events=[]
    for entity in entities:
        try:
            entity_value=next(tracker.get_latest_entity_values(entity))
            if types_entities[entity]=="DATETIME":
                tracker._set_slot(entity, DATETIME_to_iso(entity_value))
                events.append(SlotSet(entity, DATETIME_to_iso(entity_value)))
        except:
            # no entities for this entity found in the last massage    
            pass

    return events    


def DATETIME_to_iso(datetime_string):
        formatted_dates=[]
        matches = extract_dates(datetime_string)
        for match in matches:
            formatted_dates.append(match.isoformat())

        if len(formatted_dates)==0:
            cal = parsedatetime.Calendar()
            formatted_dates=[]
            dates=datetime_string.split(" and ")
            if len(dates)==1:
                dates=dates[0]
                dates=dates.split(" to ")
            for date_string in dates:
                time_struct, parse_status = cal.parse(date_string)
                date=datetime(*time_struct[:6])
                formatted_dates.append(date.isoformat())
            
        return('/'.join(formatted_dates))